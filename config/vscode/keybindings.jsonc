[
   // GENERAL
   {
      "key": "ctrl+p",
      "command": "workbench.action.showCommands",
      "when": "!terminalFocus"
   },
   {
      "key": "ctrl+shift+p",
      "command": "workbench.action.openRecent"
   }, 
   {
      "key": "ctrl+shift+e",
      "command": "workbench.action.toggleSidebarVisibility"
   },
   {
      "key": "ctrl+k n",
      "command": "notifications.showList"
   },
   {
      "key": "ctrl+k n",
      "command": "notifications.focusFirstToast",
      "when": "notificationToastsVisible"
   },
   {
      "key": "ctrl+p",
      "command": "extension.vim_ctrl+p",
      "when": "editorTextFocus && vim.mode == 'CommandlineInProgress' || vim.mode == 'SearchInProgressMode'"
   },
   {
      "key": "ctrl+n",
      "command": "extension.vim_ctrl+n",
      "when": "editorTextFocus && vim.mode == 'CommandlineInProgress' || vim.mode == 'SearchInProgressMode'"
   },
   {
      "key": "ctrl+i",
      "command": "tab",
      "when": "!terminalFocus && vim.mode == 'Insert'"
   },
   {
      "key": "ctrl+space ctrl+space",
      "command": "toggleSuggestionDetails",
      "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
   },

   // EDITORS
   {
      "key": "ctrl+o",
      "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup",
      "when": "!terminalFocus && vim.mode != 'Insert'"
   },
   {
      "key": "ctrl+i",
      "command": "workbench.action.openNextRecentlyUsedEditorInGroup",
      "when": "!terminalFocus && vim.mode != 'Insert'"
   },

   // GROUPS
   {
      "key": "ctrl+shift+-",
      "command": "workbench.action.decreaseViewSize"
   },
   {
      "key": "ctrl+shift+=",
      "command": "workbench.action.increaseViewSize"
   },
   {
      "key": "ctrl+k ctrl+k",
      "command": "workbench.action.evenEditorWidths"
   },
   {
      "key": "ctrl+k ctrl+m",
      "command": "workbench.action.toggleMaximizeEditorGroup",
      "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
   },
   {
      "key": "ctrl+h",
      "command": "runCommands",
      "args": { "commands": [ "workbench.action.focusNextGroup", "workbench.action.maximizeEditorHideSidebar" ] },
      "when": "!terminalFocus"
   },

   // TERMINAL
   {
      "key": "ctrl+j",
      "command": "runCommands",
      "args": { "commands": ["workbench.action.closeSidebar", "workbench.action.terminal.focus"] },
      "when": "sideBarVisible"
   },
   {
      "key": "ctrl+shift+j",
      "command": "workbench.action.terminal.new",
      "when": "terminalFocus"
   },
   {
      "key": "ctrl+0",
      "command": "workbench.action.focusActiveEditorGroup",
      "when": "terminalFocus"
   },
   {
      "key": "ctrl+0",
      "command": "workbench.action.terminal.focus",
      "when": "!terminalFocus"
   },
   {
      "key": "ctrl+x",
      "command": "workbench.action.toggleMaximizedPanel",
      "when": "terminalFocus"
   },
   {
      "key": "ctrl+h",
      "command": "workbench.action.terminal.focusNext",
      "when": "terminalFocus"
   },
   {	
      "key": "ctrl+alt+b",	
      "command": "workbench.action.terminal.sendSequence",	
      "args": { "text": "\u001Bb" },	
      "when": "terminalFocus"	
   },	
   {	
      "key": "ctrl+alt+f",	
      "command": "workbench.action.terminal.sendSequence",	
      "args": { "text": "\u001bf" },	
      "when": "terminalFocus"	
   },

   // REMOVED
   {
      "key": "escape escape",
      "command": "-workbench.action.exitZenMode"
   },
   {
      "key": "ctrl+k",
      "command": "-extension.vim_ctrl+k"
   },
   {
      "key": "ctrl+j",
      "command": "-extension.vim_ctrl+j"
   },
   {
      "key": "ctrl+f",
      "command": "-workbench.action.terminal.focusFind"
   },
   {
      "key": "ctrl+e",
      "command": "-workbench.action.quickOpen"
   },
   {
      "key": "ctrl+p",
      "command": "-workbench.action.quickOpen"
   },
   {
      "key": "ctrl+=",
      "command": "-workbench.action.zoomIn"
   },
   {
      "key": "ctrl+-",
      "command": "-workbench.action.zoomOut"
   },
   {
      "key": "ctrl+/",
      "command": "-editor.action.commentLine"
   }
]
